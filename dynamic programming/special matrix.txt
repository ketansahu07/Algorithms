// find the number of ways to reach the end of a matrix when there are certain cells that are blocked (-1)

#include <bits/stdc++.h>
using namespace std;
#define MOD 1000000007

long long int ways(long long int dp[][1000], int n, int m)
{
    if(dp[0][0]==-1)
    return 0;
    
    for(int i=1;i<n;i++)
    {
        if(dp[i][0]==0)
            dp[i][0]=1;
        else 
            break;
    }
    
    for(int i=1;i<m;i++)
    {
        if(dp[0][i]==0)
            dp[0][i]=1;
        else
            break;
    }
    
    for(int i=1;i<n;i++)
    {
        for(int j=1;j<m;j++)
        {
            if(dp[i][j]==-1)
            continue;
            
            if(dp[i-1][j]>0)
            {
                dp[i][j]= (dp[i][j]+dp[i-1][j])%MOD;
            }
            
            if(dp[i][j-1]>0)
            {
                dp[i][j]=(dp[i][j]+dp[i][j-1])%MOD;
            }
        }
    }
    // cout<<dp[n-1][m-1]<<endl;
    return (dp[n-1][m-1]>0)?dp[n-1][m-1]:0;
}

int main() {
	int t;
	cin>>t;
	while(t--)
	{
	    int n,m,k;
	    cin>>n>>m>>k;
	    long long int dp[n][1000];
	    for(int i=0;i<n;i++)
	        for(int j=0;j<m;j++)
	            dp[i][j]=0;
	    
	    for(int i=0;i<k;i++)
	    {
	        int x,y;
	        cin>>x>>y;
	        dp[x-1][y-1]=-1;
	    }
	    
	    cout<<ways(dp,n,m)<<endl;
	}
	return 0;
}