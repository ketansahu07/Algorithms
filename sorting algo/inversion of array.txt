//https://practice.geeksforgeeks.org/problems/inversion-of-array/1/?track=SPCF-Sorting&batchId=154

long long int countAndMerge(long long arr[],long long l,long long m,long long r)
{
    long long res=0;
    long long n1=m-l+1,n2=r-m;
    long long left[n1],right[n2];
    for(int i=0;i<n1;i++)
        left[i]=arr[l+i];     //coz its not necessery that l is always 0 we add l+i
    
    for(int i=0;i<n2;i++)
        right[i]=arr[m+1+i];
    
    int i=0,j=0,k=l;
    while(i<n1 && j<n2)
    {
        if(left[i]<=right[j])
        {
            arr[k++]=left[i++];
        }
        else
        {
            arr[k++]=right[j++];
            res=res+(n1-i);     //also count all the element after the ith position in first array
        }
    }
    while(i<n1)
        arr[k++]=left[i++];
    while(j<n2)
        arr[k++]=right[j++];
        
    return res;
}

long long int countInv(long long a[],long long l, long long r)
{
    long long res=0;
    if(l<r)
    {
        long long m=l+(r-l)/2;
        res+=countInv(a,l,m);
        res+=countInv(a,m+1,r);
        res+=countAndMerge(a,l,m,r);
    }
    return res;
}
long long int inversionCount(long long A[],long long N)
{
    long long l=0,h=N-1;
    return countInv(A,l,h);
}